<?xml version="1.0" encoding="utf-8"?><DEFECTS><DEFECT>
    <SFA>
      <FILEPATH>C:\dev\ConstraintPhysics\Demo\src\renderer\</FILEPATH>
      <FILENAME>Mat4.h</FILENAME>
      <LINE>89</LINE>
      <COLUMN>27</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>rndr::Mat4::*=</FUNCTION>
    <DECORATED>??XMat4@rndr@@QEAAXV01@@Z</DECORATED>
    <FUNCLINE>84</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\dev\ConstraintPhysics\ConstraintPhysics\src\</FILEPATH>
      <FILENAME>AABB.h</FILENAME>
      <LINE>20</LINE>
      <COLUMN>9</COLUMN>
    </SFA>
    <DEFECTCODE>26498</DEFECTCODE>
    <DESCRIPTION>The function 'std::numeric_limits&lt;double&gt;::infinity' is constexpr, mark variable 'inf' constexpr if compile-time evaluation is desired (con.5).</DESCRIPTION>
    <FUNCTION>AABB::combine</FUNCTION>
    <DECORATED>?combine@AABB@@SA?AU1@AEBV?$vector@UAABB@@V?$allocator@UAABB@@@std@@@std@@@Z</DECORATED>
    <FUNCLINE>15</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\dev\ConstraintPhysics\ConstraintPhysics\src\</FILEPATH>
      <FILENAME>ConstraintSolver.h</FILENAME>
      <LINE>12</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'phyz::Constraint::b' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>phyz::Constraint::{ctor}</FUNCTION>
    <DECORATED>??0Constraint@phyz@@QEAA@XZ</DECORATED>
    <FUNCLINE>12</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>phyz::Constraint::b</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\dev\ConstraintPhysics\ConstraintPhysics\src\</FILEPATH>
      <FILENAME>ConstraintSolver.h</FILENAME>
      <LINE>43</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'phyz::ContactConstraint::psuedo_target_val' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>phyz::ContactConstraint::{ctor}</FUNCTION>
    <DECORATED>??0ContactConstraint@phyz@@QEAA@XZ</DECORATED>
    <FUNCLINE>43</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>phyz::ContactConstraint::psuedo_target_val</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\dev\ConstraintPhysics\ConstraintPhysics\src\</FILEPATH>
      <FILENAME>ConstraintSolver.h</FILENAME>
      <LINE>67</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'phyz::FrictionConstraint::inertia_val' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>phyz::FrictionConstraint::{ctor}</FUNCTION>
    <DECORATED>??0FrictionConstraint@phyz@@QEAA@XZ</DECORATED>
    <FUNCLINE>67</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>phyz::FrictionConstraint::inertia_val</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\dev\ConstraintPhysics\ConstraintPhysics\src\</FILEPATH>
      <FILENAME>PhysicsEngine.h</FILENAME>
      <LINE>14</LINE>
      <COLUMN>2</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'phyz::PhysicsEngine::step_time' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>phyz::PhysicsEngine::{ctor}</FUNCTION>
    <DECORATED>??0PhysicsEngine@phyz@@QEAA@XZ</DECORATED>
    <FUNCLINE>14</FUNCLINE>
    <ADDITIONALINFO>
      <targetSymbol>phyz::PhysicsEngine::step_time</targetSymbol>
    </ADDITIONALINFO>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\dev\ConstraintPhysics\Demo\src\</FILEPATH>
      <FILENAME>main_old.cpp</FILENAME>
      <LINE>21</LINE>
      <COLUMN>31</COLUMN>
    </SFA>
    <DEFECTCODE>6255</DEFECTCODE>
    <DESCRIPTION>_alloca indicates failure by raising a stack overflow exception.  Consider using _malloca instead.</DESCRIPTION>
    <FUNCTION>CompileShader</FUNCTION>
    <DECORATED>?CompileShader@@YAIIAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z</DECORATED>
    <FUNCLINE>10</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>C:\dev\ConstraintPhysics\Demo\src\renderer\</FILEPATH>
      <FILENAME>Shader.cpp</FILENAME>
      <LINE>119</LINE>
      <COLUMN>32</COLUMN>
    </SFA>
    <DEFECTCODE>6255</DEFECTCODE>
    <DESCRIPTION>_alloca indicates failure by raising a stack overflow exception.  Consider using _malloca instead.</DESCRIPTION>
    <FUNCTION>rndr::CompileShader</FUNCTION>
    <DECORATED>?CompileShader@rndr@@YAIIAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z</DECORATED>
    <FUNCLINE>108</FUNCLINE>
    <PATH></PATH>
  </DEFECT></DEFECTS>